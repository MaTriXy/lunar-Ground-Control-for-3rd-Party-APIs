#!/usr/bin/env bash

write_env_var() {
    env_var_name=$1
    yaml_path=$2
    default_value=$3

    if [ ! -f "$LUNAR_PROXY_POLICIES_CONFIG" ]; then
        echo -n null > "/var/run/lunar_env/$env_var_name"
    else
        value=$(yq -r "$yaml_path // null" < "$LUNAR_PROXY_POLICIES_CONFIG")
        if [ "$value" == "null" ] || [ -z "$value" ]; then
            if [ -n "$default_value" ]; then
                echo -n "$default_value" > "/var/run/lunar_env/$env_var_name"
            else
                echo -n null > "/var/run/lunar_env/$env_var_name"
            fi
        else
            echo -n "$value" > "/var/run/lunar_env/$env_var_name"
        fi
    fi
}

mkdir -p /var/run/lunar_env

echo $LUNAR_VERSION > "/var/run/lunar_env/LUNAR_VERSION"
if [ -n "$SANDBOX_SCENARIO" ]; then
    echo $SANDBOX_SCENARIO > "/var/run/lunar_env/SANDBOX_SCENARIO"
else
    echo -n null > "/var/run/lunar_env/SANDBOX_SCENARIO"
fi

if [ -n "$LUNAR_API_KEY" ]; then
    echo $LUNAR_API_KEY > "/var/run/lunar_env/LUNAR_API_KEY"
else
    echo -n null > "/var/run/lunar_env/LUNAR_API_KEY"
fi

if [ -z "$LOG_LEVEL" ]; then
    echo -n "error" > "/var/run/lunar_env/FLUENT_BIT_LOG_LEVEL"
else
    echo -n "$LOG_LEVEL" > "/var/run/lunar_env/FLUENT_BIT_LOG_LEVEL"
fi

if [ -f "$LUNAR_PROXY_POLICIES_CONFIG" ]; then

    # File exporter configuration
    write_env_var "LUNAR_EXPORTER_FILE_DIR" '.exporters.file.file_dir'
    write_env_var "LUNAR_EXPORTER_FILE_NAME" '.exporters.file.file_name'

    # S3 exporter configuration
    write_env_var "LUNAR_EXPORTER_S3_BUCKET" '.exporters.s3.bucket_name'
    write_env_var "LUNAR_EXPORTER_S3_REGION" '.exporters.s3.region'

    s3_region=$(cat /var/run/lunar_env/LUNAR_EXPORTER_S3_REGION)
    write_env_var "LUNAR_EXPORTER_S3_ENDPOINT" '.exporters.s3.endpoint' "https://s3.$s3_region.amazonaws.com"

    # S3 Minio exporter configuration
    write_env_var "LUNAR_EXPORTER_S3_MINIO_BUCKET" '.exporters.s3_minio.bucket_name'
    write_env_var "LUNAR_EXPORTER_S3_MINIO_URL" '.exporters.s3_minio.url'

    # Extract allowed and blocked domains
    allowed_domains=$(yq -r '.allowed_domains // [] | join("\n")' < "$LUNAR_PROXY_POLICIES_CONFIG")
    blocked_domains=$(yq -r '.blocked_domains // [] | join("\n")' < "$LUNAR_PROXY_POLICIES_CONFIG")
fi

# Create the flows path param config file and directories for flows if flows are enabled
if [ "$LUNAR_STREAMS_ENABLED" == "true" ]; then
    touch "$LUNAR_FLOWS_PATH_PARAM_CONFIG"
    mkdir -p ${LUNAR_PROXY_FLOW_DIRECTORY}
    mkdir -p ${LUNAR_PROXY_PROCESSORS_DIRECTORY}
    mkdir -p ${LUNAR_FLOWS_PATH_PARAM_DIR}
    mkdir -p ${LUNAR_PROXY_QUOTAS_DIRECTORY}
fi

# Create certificate directories
mkdir -p ${TLS_CERT_DIRECTORY}
mkdir -p ${MTLS_CERT_DIRECTORY}

# Output each allowed domain on a new line, or ".*" if empty
if [ -z "$allowed_domains" ]; then
    echo ".*" > /etc/haproxy/allowed_domains.lst
else
    echo -e "$allowed_domains" > /etc/haproxy/allowed_domains.lst
fi

echo -e "$blocked_domains" > /etc/haproxy/blocked_domains.lst

# Output the allowed and blocked domains to the logs
echo "Allowed domains:"
cat /etc/haproxy/allowed_domains.lst

echo "Blocked domains:"
cat /etc/haproxy/blocked_domains.lst

# Extract mTLS configuration from the policies.yaml
MAP_FILE="/etc/haproxy/maps/mtls.map"
echo "Validating mTLS map file: $MAP_FILE"
> "$MAP_FILE"

mTLS_CONFIG=$LUNAR_PROXY_POLICIES_CONFIG

# Check if flows feature flag is enabled, if it is then use the new gateway_config.yaml file
if [ "$LUNAR_STREAMS_ENABLED" == "true" ]; then
    mTLS_CONFIG="$LUNAR_PROXY_CONFIG_DIR/gateway_config.yaml"
fi

echo "Extracting mTLS configuration from configuration file: $mTLS_CONFIG"
if [ -f "$mTLS_CONFIG" ]; then
    yq e '.mTLS[] | .domain + " " + (.cert // "")' "$mTLS_CONFIG" >> "$MAP_FILE"
else
    echo "mTLS configuration file not found: $mTLS_CONFIG"
fi

if [[ -s "$MAP_FILE" ]]; then
    echo "mTLS configuration:"
    
    if [ -f "$mTLS_CONFIG" ]; then
        yq eval '.mTLS[] | .domain + " " + .cert' "$mTLS_CONFIG" | while read -r domain cert; do
            section="backend $domain
            mode http
            server clear 0.0.0.0:0 ssl crt $cert verify none

            "
            echo "Adding mTLS configuration for $domain with cert $cert"
            awk -v replacement="$section" '
            {
                # If we find the placeholder, insert the replacement data first
                if ($0 ~ /# _ # Lunar_mTLS_Backend_Binder # _ #/) {
                    print replacement
                }
                print
            }' "$LUNAR_HAPROXY_CONFIG" > modified_haproxy_cfg && mv modified_haproxy_cfg "$LUNAR_HAPROXY_CONFIG"
        done
    else
        echo "mTLS configuration file not found: $mTLS_CONFIG"
    fi
fi
